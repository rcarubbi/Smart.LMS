@using SmartLMS.Domain.Resources
@model CourseViewModel

@{
    ViewBag.Title = Resource.CourseUpdateTitle;
}

<div class="panel panel-success">
    <div class="panel-heading">
         @Resource.CourseUpdateTitle
    </div>
    <div class="panel-body">
        <div class="form-horizontal">
            <div class="form-group">
                @Html.LabelFor(model => model.Image, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <div class="jumbotron jumbotron-upload">
                        <form action="@Url.Action("SaveImage")" method="post" enctype="multipart/form-data" class="dropzone" id="dropzoneForm" style="background: none; border: none;">
                            <div class="fallback">
                                <input name="file" type="file"/>
                                <input type="submit" value="@Resource.SendButton"/>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Image)

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new {@class = "text-danger"})
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Order, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Order, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Order, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.SubjectId, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.SubjectId, ViewBag.Subjects as SelectList, Resource.SelectSubject, new {@class = "form-control dropdownjs"})
                        @Html.ValidationMessageFor(model => model.SubjectId, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Active, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.Active)
                            @Html.ValidationMessageFor(model => model.Active, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.TeacherInChargeId, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.TeacherInChargeId, ViewBag.Teachers as SelectList, Resource.SelectTeacher, new {@class = "form-control dropdownjs"})
                        @Html.ValidationMessageFor(model => model.TeacherInChargeId, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button type="submit" class="btn btn-success btn-sm">
                            <i class="fa fa-save"></i>
                        </button>
                        <a href="@ViewBag.BackURL" class="btn btn-simple btn-sm btn-default">@Resource.BackButton</a>
                    </div>
                </div>
            </div>
        }


    </div>
</div>
<div style="display: none" id="dz-template-preview">
    <div class="dz-preview dz-file-preview">
        <div class="dz-details">
            <div class="dz-filename">
                <span data-dz-name></span>
            </div>
            <div class="dz-size" data-dz-size></div>
            <img data-dz-thumbnail/>
        </div>
        <div class="dz-progress">
            <div class="progress progress-line-primary">
                <div class="dz-upload progress-bar" role="progressbar" aria-valuemin="0" aria-valuemax="100" data-dz-uploadprogress></div>
            </div>
        </div>
        <div class="dz-success-mark">
            <span>✔</span>
        </div>
        <div class="dz-error-mark">
            <span>✘</span>
        </div>
        <div class="dz-error-message">
            <span data-dz-errormessage></span>
        </div>
    </div>
</div>

@section styles {
    @Styles.Render("~/Content/dropzone/dropZoneStyles")
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/dropzone")
    <script>
        (function() {
            var $private = {};

            Dropzone.options.dropzoneForm = {
                maxFiles: 1,
                init: function() {
                    this.on("complete",
                        function(data) {
                            if (data.xhr != null) {
                                var res = JSON.parse(data.xhr.responseText);
                                $("input[name='Image']").val(res.Message);
                            }
                        });
                    this.on("removedfile",
                        function(data) {
                            var id = "";
                            if (data.xhr) {
                                var res = JSON.parse(data.xhr.response);
                                id = res.Message;
                            } else {
                                id = data.name;
                            }
                            $private.deleteImage(id);
                            $("input[name='Image']").val("");
                        });

                    $private.loadImage('@Model.Id.ToString()', this);
                },
                previewTemplate: $("#dz-template-preview").html(),
                dictDefaultMessage: "@Resource.DragAndDropImageMessage",
                addRemoveLinks: true,
                dictMaxFilesExceeded: "@Resource.OnlyOneImageCourseMessage",
                dictRemoveFile: "@Resource.DeleteImageButton",
                dictCancelUpload: "@Resource.CancelImageButton"
            };


            $private.deleteImage = function(imageName) {

                $.ajax({
                    type: "POST",
                    url: SmartLMS.api + "Course/DeleteImage",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: JSON.stringify({ imageName })
                });
            };


            $private.loadImage = function(courseId, dropzoneForm) {
                var thumbnailUrl = SmartLMS.api + "Course/GetCourseImage/" + courseId;

                $.ajax({
                    type: "POST",
                    url: SmartLMS.api + "Course/GetImageData",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: JSON.stringify({ courseId }),
                    success: function(data) {

                        var file = {
                            name: data.Name,
                            size: data.Size,
                            url: thumbnailUrl,
                            accepted: true,
                            status: Dropzone.ADDED
                        };

                        dropzoneForm.emit("addedfile", file);
                        dropzoneForm.emit("thumbnail", file, thumbnailUrl);
                        dropzoneForm.emit("complete", file);
                        dropzoneForm.files.push(file);
                    }
                });

            };
        }());
    </script>
}